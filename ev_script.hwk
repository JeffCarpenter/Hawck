-- TODO

-- Hawck
-- Pattern matching Lua-powered DSL inspired by AWK

-- Continue is implicit if using `any`

-- Exit if key up event is encountered, only work on keydown
up <= done

-- Alternative method, assume `down` for all conditions
assume(down)

-- Simple replacement
key "ø" + shift <= emit("[")
key "ø" <= emit("{")
key "æ" + shift <= emit("]")
key "æ" <= emit("}")

-- Multiplication of emits
key "tab" <= emit(" ")*4

-- Trigger on sequence of characters
keys "frick" <= backspace*6 .. emit("fuck")

-- Notifications
key "f12" + alt <= notify("Keypress", "The special key was pressed")

-- Different actions for different keyboards
key "f1" + kbd(1) <= notify("Keypress", "Pressed f1 on 1st keyboard")

-- Working with .desktop files to perform app actions.
key "f2" <= notify("Launch", "Launching private firefox") .. app("firefox"):run("new-private-window")

key "f13" <= say("This")

-- This *might* happen eventually, but it makes the application way more complex.
key "f3" <= ask("?", "What is your favorite colour", function (answer)
    if answer == "blue" then
        notify("Good answer", "You may pass")
    else
        -- Redo "f3" key action
        rekey()
    end
end)
key "f4" <= dialogue("How high are you?", {"yes", "no"}, function (answer)
    -- Check for answer
end)
key "f5" <= yesorno("")

-- Media player access through DBus
key x <= player("spotify"):playnext()
key x <= player("spotify"):playprev()
key x <= player("spotify"):pause()
key x <= player("spotify"):toggle()

-- Keylogger
any <= echo .. function ()
    log_file:write(tostring(key))
end
