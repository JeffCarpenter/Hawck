-- Original hawck script:

"F7" => use "programming_mode" .. say "Programming mode enabled"

programming_mode:
    "F7" => use "default" .. say "Programming mode disabled"
    "ø"  => "{"
    "Ø"  => "["

-- Conversion to Lua, only two things happen here,
-- 1st:
--   blocks (block:) are surrounded by a function definition, and a new local
--   declaration of __matches which is returned.
-- 2nd:
--   `x => y` operations are turned into `__match[ x ] = y` operations
function __match_maps.programming_mode()
  local __matches = MatchMap.new()

  __matches[ "F7" ] = use "default" .. say "Programming mode disabled"
  __matches[ "ø"  ] = "{"
  __matches[ "Ø"  ] = "["

  return __matches
end

-- Strings put into `__match` are converted into functions. On the left
-- hand side the strings are checked for, on the right hand side they are
-- emitted.
function __match_maps.programming_mode()
  local __matches = MatchMap.new()

  __matches[ key "F7"             ] = use "default" .. say "Programming mode disabled"
  __matches[ key "oslash"         ] = with("AltGr", press("7"))
  __matches[ shift + key "oslash" ] = with("AltGr", press("8"))

  return __matches
end

-- From here on out I show what Lua actually does with the input

-- All utility functions provided by hawck are actually LazyConcatF objects
-- that when called return ConcatF objects, which are functions that can
-- be concatenated.
function __match_maps.programming_mode()
  local __matches = MatchMap.new()

  __matches[ key "F7"             ] = function ()
    use("default")()
    say("Programming mode disabled")()
  end
  __matches[ key "oslash"         ] = function ()
    hold("AltGr")()
    press("7")()
    release("AltGr")()
  end
  __matches[ shift + key "oslash" ] = function ()
    hold("AltGr")()
    press("8")()
    release("AltGr")()
  end

  return __matches
end

-- The hold/press functions call the lower-level __emit function, which
-- fakes keypresses using udev.
-- The use function swaps the global `__matches` map.
function __match_maps.programming_mode()
  local __matches = MatchMap.new()

  __matches[ key "F7"             ] = function ()
    _G.__matches = __match_maps["default"]()
    __dbus_notify("Hawck", "Programming mode disabled")
  end
  __matches[ key "oslash"         ] = function ()
    __emit(Event.KEY, getKeysym("AltGr"), KeyMode.DOWN)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("7"), KeyMode.DOWN)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("7"), KeyMode.UP)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("AltGr"), KeyMode.UP)
    __emit(Event.SYN, 0, 0)
  end
  __matches[ shift + key "oslash" ] = function ()
    __emit(Event.KEY, getKeysym("AltGr"), KeyMode.DOWN)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("8"), KeyMode.DOWN)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("8"), KeyMode.UP)
    __emit(Event.SYN, 0, 0)
    __emit(Event.KEY, getKeysym("AltGr"), KeyMode.UP)
    __emit(Event.SYN, 0, 0)
  end

  return __matches
end